#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>
#include <Encoder.h>

// OLED I2C
Adafruit_SH1106G display(128, 64, &Wire, -1);

// Rotary encoder pins
Encoder encoder(2, 3);  // CLK = D2, DT = D3

#define ENCODER_BTN 4
#define CONFIRM_BTN 5
#define BACK_BTN 6

#define RELAY_PINK   9
#define RELAY_PURPLE 8
#define RELAY_GREEN  7

// Menu state
const char* modeItems[] = {"AllPurpose", "Grow", "Bloom"};
const int modeCount = sizeof(modeItems) / sizeof(modeItems[0]);
int modeIndex = 0;
int gallonAmount = 1;

enum ScreenState {
  MODE_SELECT,
  GALLON_SELECT,
  CONFIRM_SCREEN
};
ScreenState screenState = MODE_SELECT;

long lastEncoderPos = 0;

struct Dosing {
  int pink;
  int purple;
  int green;
};

Dosing dosingProfiles[] = {
  {5, 5, 5},    // AllPurpose
  {5, 10, 15},  // Grow
  {15, 10, 5}   // Bloom
};

void setup() {
  Serial.begin(115200);

  if (!display.begin()) {
    Serial.println("Display failed");
    while (1);
  }

  display.setTextColor(SH110X_WHITE);
  display.setTextSize(1);
  display.clearDisplay();
  updateDisplay();

  pinMode(ENCODER_BTN, INPUT_PULLUP);
  pinMode(CONFIRM_BTN, INPUT_PULLUP);
  pinMode(BACK_BTN, INPUT_PULLUP);

  pinMode(RELAY_PINK, OUTPUT);
  pinMode(RELAY_PURPLE, OUTPUT);
  pinMode(RELAY_GREEN, OUTPUT);

  digitalWrite(RELAY_PINK, LOW);
  digitalWrite(RELAY_PURPLE, LOW);
  digitalWrite(RELAY_GREEN, LOW);

  encoder.write(0); // Reset position
  lastEncoderPos = 0;
}

void loop() {
  long newPos = encoder.read() / 4;  // Most EC11s give 4 counts per detent
  int delta = newPos - lastEncoderPos;

  if (delta != 0) {
    lastEncoderPos = newPos;

    if (screenState == MODE_SELECT) {
      modeIndex -= delta; // Reversed increment direction
      if (modeIndex < 0) modeIndex = modeCount - 1;
      if (modeIndex >= modeCount) modeIndex = 0;

    } else if (screenState == GALLON_SELECT) {
      gallonAmount -= delta; // Reversed increment direction
      if (gallonAmount < 1) gallonAmount = 100;
      if (gallonAmount > 100) gallonAmount = 1;
    }

    updateDisplay();
  }

  // Confirm buttons
  if (digitalRead(ENCODER_BTN) == LOW || digitalRead(CONFIRM_BTN) == LOW) {
    delay(150); // Debounce
    if (screenState == MODE_SELECT) {
      screenState = GALLON_SELECT;
      encoder.write(0);
      lastEncoderPos = 0;
    } else if (screenState == GALLON_SELECT) {
      screenState = CONFIRM_SCREEN;
      encoder.write(0);
      lastEncoderPos = 0;
    } else if (screenState == CONFIRM_SCREEN) {
      Serial.println(">> DISPENSING STARTED <<");
      runDosing(modeIndex, gallonAmount);
    }
    updateDisplay();
  }

  // Back button
  if (digitalRead(BACK_BTN) == LOW) {
    delay(150); // Debounce
    if (screenState == GALLON_SELECT) {
      screenState = MODE_SELECT;
    } else if (screenState == CONFIRM_SCREEN) {
      screenState = GALLON_SELECT;
    }
    encoder.write(0);
    lastEncoderPos = 0;
    updateDisplay();
  }

  delay(10);
}

void runDosing(int modeIndex, int gallons) {
  Dosing d = dosingProfiles[modeIndex];

  unsigned long pinkTime = d.pink * gallons * 1000UL;
  unsigned long purpleTime = d.purple * gallons * 1000UL;
  unsigned long greenTime = d.green * gallons * 1000UL;

  Serial.println("Starting dosing...");

  unsigned long start = millis();
  digitalWrite(RELAY_PINK, HIGH);
  while (millis() - start < pinkTime) delay(1);
  digitalWrite(RELAY_PINK, LOW);

  start = millis();
  digitalWrite(RELAY_PURPLE, HIGH);
  while (millis() - start < purpleTime) delay(1);
  digitalWrite(RELAY_PURPLE, LOW);

  start = millis();
  digitalWrite(RELAY_GREEN, HIGH);
  while (millis() - start < greenTime) delay(1);
  digitalWrite(RELAY_GREEN, LOW);

  Serial.println("Dosing complete.");
}

void updateDisplay() {
  display.clearDisplay();
  display.setCursor(0, 0);

  if (screenState == MODE_SELECT) {
    display.println("Select Mode:");
    for (int i = 0; i < modeCount; i++) {
      display.setCursor(0, 12 + i * 10);
      display.print((i == modeIndex) ? "> " : "  ");
      display.println(modeItems[i]);
    }

  } else if (screenState == GALLON_SELECT) {
    display.println("How many gallons?");
    display.setTextSize(2);
    display.setCursor(20, 30);
    display.println(String(gallonAmount));
    display.setTextSize(1);

  } else if (screenState == CONFIRM_SCREEN) {
    display.println("Confirm:");
    display.setCursor(0, 15);
    display.println("> Mode: " + String(modeItems[modeIndex]));
    display.setCursor(0, 30);
    display.println("> Gallons: " + String(gallonAmount));
    display.setCursor(0, 50);
    display.println("Press confirm to run");
  }

  display.display();
}
